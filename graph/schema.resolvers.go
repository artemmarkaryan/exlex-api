package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"net/mail"

	"github.com/artemmarkaryan/exlex-backend/graph/model"
	"github.com/artemmarkaryan/exlex-backend/internal/auth"
	"github.com/artemmarkaryan/exlex-backend/internal/schema"
	user_profile "github.com/artemmarkaryan/exlex-backend/internal/service/user-profile"
	"github.com/samber/lo"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, data model.LoginData) (ok model.Ok, err error) {
	err = r.ServiceContainer.Authentication().Login(ctx, data.Email, data.Debug)
	ok.Ok = err == nil
	return
}

// Signup is the resolver for the signup field.
func (r *mutationResolver) Signup(ctx context.Context, data model.SignupData) (ok model.Ok, err error) {
	role, err := schema.MapRole(data.Role)
	if err != nil {
		return
	}

	err = r.ServiceContainer.Authentication().Signup(ctx, data.Email, role, data.Debug)
	ok.Ok = err == nil
	return
}

// VerifyOtp is the resolver for the verifyOTP field.
func (r *mutationResolver) VerifyOtp(ctx context.Context, email string, otp string) (token model.Token, err error) {
	if _, err = mail.ParseAddress(email); err != nil {
		return
	}

	t, err := r.ServiceContainer.Authentication().VerifyOTP(ctx, email, otp)
	if err != nil {
		return
	}

	token.Access = t
	return
}

// SetCustomerProfile is the resolver for the SetCustomerProfile field.
func (r *mutationResolver) SetCustomerProfile(ctx context.Context, data model.SetCustomerProfileData) (
	model.Ok,
	error,
) {
	c, err := auth.FromContext(ctx)
	if err != nil {
		return model.Ok{}, err
	}

	updateData := user_profile.UpdateCustomerProfileData{}
	updateData.UserUUID = c.UserID
	updateData.Name = data.FullName

	err = r.ServiceContainer.
		UserProfile().
		UpdateCustomerProfile(ctx, updateData)

	return model.Ok{Ok: err == nil}, err
}

// SetExecutorProfile is the resolver for the SetExecutorProfile field.
func (r *mutationResolver) SetExecutorProfile(ctx context.Context, data model.SetExecutorProfileData) (
	model.Ok,
	error,
) {
	c, err := auth.FromContext(ctx)
	if err != nil {
		return model.Ok{}, err
	}

	updateData := user_profile.UpdateExecutorProfileData{}
	updateData.UserUUID = c.UserID
	updateData.FullName = data.FullName
	updateData.Education = data.EducationTypeID
	updateData.Specialities = data.Specialization
	updateData.ExperienceYears = data.WorkExperience

	err = r.ServiceContainer.UserProfile().UpdateExecutorProfile(ctx, updateData)
	return model.Ok{Ok: err == nil}, err
}

// Live is the resolver for the live field.
func (r *queryResolver) Live(ctx context.Context) (bool, error) {
	return true, nil
}

// Authorized is the resolver for the authorized field.
func (r *queryResolver) Authorized(ctx context.Context) (bool, error) {
	_, err := auth.FromContext(ctx)
	return err != auth.ErrUnauthenticated, err
}

// Specialities is the resolver for the specialities field.
func (r *queryResolver) Specialities(ctx context.Context) ([]model.Speciality, error) {
	s, err := r.ServiceContainer.UserProfile().Specialities(ctx)
	if err != nil {
		return nil, err
	}

	f := func(o schema.Speciality, _ int) model.Speciality {
		return model.Speciality{
			ID:    o.ID,
			Title: o.Title,
		}
	}

	return lo.Map(s, f), nil
}

// EducationTypes is the resolver for the educationTypes field.
func (r *queryResolver) EducationTypes(ctx context.Context) ([]model.EducationType, error) {
	s, err := r.ServiceContainer.UserProfile().EducationTypes(ctx)
	if err != nil {
		return nil, err
	}

	f := func(o schema.EducationType, _ int) model.EducationType {
		return model.EducationType{
			ID:    o.ID,
			Title: o.Title,
		}
	}

	return lo.Map(s, f), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
