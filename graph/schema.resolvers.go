package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"net/mail"

	"github.com/artemmarkaryan/exlex-backend/graph/model"
)

// RequestOtp is the resolver for the requestOTP field.
func (r *mutationResolver) RequestOtp(ctx context.Context, email string) (*model.Ok, error) {
	_, err := mail.ParseAddress(email)
	if err != nil {
		return nil, err
	}

	err = r.ServiceContainer.Authentication().RequestOTP(ctx, email)
	return &model.Ok{Ok: err == nil}, err
}

// VerifyOtp is the resolver for the verifyOTP field.
func (r *mutationResolver) VerifyOtp(ctx context.Context, email string, otp string) (*model.Tokens, error) {
	_, err := mail.ParseAddress(email)
	if err != nil {
		return nil, err
	}

	panic(fmt.Errorf("not implemented: VerifyOtp - verifyOTP"))
	// 	&model.Tokens{
	//		Access:  t.Access,
	//		Refresh: t.Refresh,
	//	}, nil
}

// Live is the resolver for the live field.
func (r *queryResolver) Live(ctx context.Context) (*bool, error) {
	t := true
	return &t, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func (r *mutationResolver) Live(ctx context.Context) (res *bool, err error) {
	t := true
	return &t, nil
}
