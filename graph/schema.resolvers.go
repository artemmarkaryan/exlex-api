package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"net/mail"

	"github.com/artemmarkaryan/exlex-backend/graph/model"
	"github.com/artemmarkaryan/exlex-backend/internal/auth"
	"github.com/artemmarkaryan/exlex-backend/internal/schema"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, data model.LoginData) (ok model.Ok, err error) {
	err = r.ServiceContainer.Authentication().Login(ctx, data.Email, data.Debug)
	ok.Ok = err == nil
	return
}

// Signup is the resolver for the signup field.
func (r *mutationResolver) Signup(ctx context.Context, data model.SignupData) (ok model.Ok, err error) {
	role, err := schema.MapRole(data.Role)
	if err != nil {
		return
	}

	err = r.ServiceContainer.Authentication().Signup(ctx, data.Email, role, data.Debug)
	ok.Ok = err == nil
	return
}

// VerifyOtp is the resolver for the verifyOTP field.
func (r *mutationResolver) VerifyOtp(ctx context.Context, email string, otp string) (token model.Token, err error) {
	if _, err = mail.ParseAddress(email); err != nil {
		return
	}

	t, err := r.ServiceContainer.Authentication().VerifyOTP(ctx, email, otp)
	if err != nil {
		return
	}

	token.Access = t
	return
}

// Live is the resolver for the live field.
func (r *queryResolver) Live(ctx context.Context) (bool, error) {
	return true, nil
}

// Authorized is the resolver for the authorized field.
func (r *queryResolver) Authorized(ctx context.Context) (bool, error) {
	_, err := auth.FromContext(ctx)
	return err != auth.ErrUnauthenticated, err
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
