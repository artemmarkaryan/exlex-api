directive @authenticated on FIELD_DEFINITION
directive @role(role: Role) on FIELD_DEFINITION

type Query {
    live: Boolean!
    authenticated: Boolean! @authenticated

    specialities: [Speciality!]!
    educationTypes: [EducationType!]!

    search(id: ID!): Search! @role(role: customer) @authenticated
    searches: [Search]! @role(role: customer) @authenticated

    customer(id: ID!): Customer! @authenticated
}

type Mutation {
    login(email: String!, debug: Boolean!): Boolean!
    signup(email: String!, role: Role!, debug: Boolean!): Boolean!
    verifyOTP(email: String!, otp: String!): String!

    setCustomerProfile(data: SetCustomerProfileData!): Boolean!  @role(role: customer) @authenticated
    setExecutorProfile(data: SetExecutorProfileData!): Boolean!  @role(role: executor) @authenticated

    createSearch(data: CreateSearchInput!): ID! @role(role:customer) @authenticated
    deleteSearch(id: ID!): Boolean! @role(role:customer) @authenticated
}


enum Role {
    executor
    customer
}

input SetCustomerProfileData {
    fullName: String
}

type Customer {
    fullName: String!
}

input SetExecutorProfileData {
    fullName: String
    workExperience: Int
    educationTypeID: ID
    specialization: [ID!]
}

type Speciality {
    id: ID!
    title: String!
}

type EducationType {
    id: ID!
    title: String!
}

input DateInput {
    year: Int!
    month: Int!
    day: Int!
}

type Date {
    year: Int!
    month: Int!
    day: Int!
}

input SearchRequirementsInput {
    speciality: [ID!]!
    education_type: [ID!]!
    work_experience: Int!
}

type SearchRequirements {
    speciality: [ID!]!
    education_type: [ID!]!
    work_experience: Int!
}

input CreateSearchInput {
    title: String!
    description: String!
    price: Float!
    deadline: DateInput!
    requirements: SearchRequirementsInput!
}

type Search {
    title: String!
    description: String!
    price: Float!
    deadline: Date!
    requirements: SearchRequirements!
}